plugins {
    id 'org.springframework.boot' version '2.7.2'
    id 'io.spring.dependency-management' version '1.0.12.RELEASE'
    id 'java'
    id 'nebula.integtest' version '9.6.2'
    id "com.dorongold.task-tree" version "2.1.0"
}

group = 'ru.alfabank.skillbox.examples'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

//here in comments are the steps you need to take to add integration tests to your build

//1. Create a new source set for them
//2. Add the dependencies you need to the appropriate configurations for that source set
//3. Configure the compilation and runtime classpaths for that source set
//4. Create a task to run the integration tests

// 1+3. Adds the production classes from the main source set to the compilation
// and runtime classpaths of the integration tests — sourceSets.main.output
// is a file collection of all the directories containing compiled production
// classes and resources
//sourceSets {
//    integTest {
//        java {
//            srcDirs("src/integTest")
//        }
//
//        compileClasspath += sourceSets.main.java
//        runtimeClasspath += sourceSets.main.output
//    }
//}
// 2. пристыковываем все unit test зависимости к integTest
//configurations {
//    integTestCompileOnly.extendsFrom testCompileOnly
//    integTestAnnotationProcessor.extendsFrom testAnnotationProcessor
//}


repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', "2021.0.3")
    set('testcontainersVersion', "1.17.3")
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
    implementation 'org.springframework.cloud:spring-cloud-starter-bootstrap'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation "org.apache.commons:commons-lang3:3.12.0"
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'org.postgresql:postgresql'
    implementation 'com.vladmihalcea:hibernate-types-52:2.3.4'

    annotationProcessor 'org.projectlombok:lombok'

    // Unit test own dependencies
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.testcontainers:junit-jupiter'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    // integration test own dependencies
    integTestImplementation 'org.springframework.cloud:spring-cloud-contract-wiremock:2.1.3.RELEASE'
    integTestImplementation 'org.testcontainers:postgresql'
    integTestImplementation 'com.github.dasniko:testcontainers-keycloak:2.2.2'
    integTestRuntimeOnly 'com.h2database:h2'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
    }
}

tasks.named('test') {
    useJUnitPlatform()
}


// 4. Creating and configuring a source set automatically sets up the compilation stage,
// but it does nothing with respect to running the integration tests.
// So the last piece of the puzzle is a custom test task that uses the information
// from the new source set to configure its runtime classpath and the test classes:
//tasks.register('integTest', Test) {
//    description = 'Runs integration tests.'
//    group = 'verification'
//
//    testClassesDirs = sourceSets.integTest.output.classesDirs
//    classpath = sourceSets.integTest.runtimeClasspath
////    shouldRunAfter test
//    useJUnitPlatform()
//}
tasks.named('integrationTest') {
    useJUnitPlatform()
}
//
//task printSourceSetInformation(){
//
//    doLast{
//        sourceSets.each { srcSet ->
//            println "["+srcSet.name+"]"
//            print "-->Source directories: "+srcSet.allJava.srcDirs+"\n"
//            print "-->Output directories: "+srcSet.output.classesDirs.files+"\n"
//            print "-->Compile classpath:\n"
//            srcSet.compileClasspath.files.each {
//                print "  "+it.path+"\n"
//            }
//            println ""
//        }
//    }
//}